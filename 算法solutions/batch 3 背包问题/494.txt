494. 目标和
给你一个整数数组 nums 和一个整数 target 。

向数组中的每个整数前添加 '+' 或 '-' ，然后串联起所有整数，可以构造一个 表达式 ：

例如，nums = [2, 1] ，可以在 2 之前添加 '+' ，在 1 之前添加 '-' ，然后串联起来得到表达式 "+2-1" 。
返回可以通过上述方法构造的、运算结果等于 target 的不同 表达式 的数目。

 

示例 1：

输入：nums = [1,1,1,1,1], target = 3
输出：5
解释：一共有 5 种方法让最终目标和为 3 。
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3
示例 2：

输入：nums = [1], target = 1
输出：1


#### 0-1背包 用dp做

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        s,t = sum(nums),target
        if (s-t) % 2 == 1 or s < t:
            return 0
        n = (s-t)//2
        l = len(nums)
        dp = [[0]*(n+1) for i in range(l+1)]
        # dp[x][y] 用x个数加和为y的方案数量 0<=x<l+1 0<=y<n+1
        dp[0] = [1] + [0] * n
        for i in range(1,l+1):
            ele = nums[i-1]
            for j in range(n+1):
                dp[i][j] = dp[i-1][j]
                if j - ele >= 0:
                    dp[i][j] += dp[i-1][j-ele]

        #for a in dp:
        #    print(a)
        return dp[-1][-1]