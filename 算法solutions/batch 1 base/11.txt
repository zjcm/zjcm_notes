11. 盛最多水的容器
给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

说明：你不能倾斜容器。

 

示例 1：



输入：[1,8,6,2,5,4,8,3,7]
输出：49 
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。
示例 2：

输入：height = [1,1]
输出：1
示例 3：

输入：height = [4,3,2,1,4]
输出：16
示例 4：

输入：height = [1,2,1]
输出：2

# 经典题目了，想清楚之后很简单
# 思路：双指针+利用单调更优的思路来剪枝，假设当前的左右指针分别是 a 和 b，且 a 处的高度小于 b
# 那么 容量 = min(a,b) * (b-a) 实际上也就是 a * (b-a)，只由a的高度和指针距离决定，那么我们一定可以舍弃所有的a和<b这样的双指针对应的答案
# 所以左指针右移即可。反过来如果b处的高度更小，就右指针左移。

class Solution:
    def maxArea(self, height: List[int]) -> int:
        l = len(height)
        left,right = 0,l-1
        ans = 0
        while left < right:
            v = (right - left) * min(height[right], height[left])
            ans = max(v ,ans)
            if height[right] > height[left]:
                left += 1
            else:
                right -= 1
        return ans