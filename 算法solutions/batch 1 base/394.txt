给定一个经过编码的字符串，返回它解码后的字符串。

编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。

你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。

此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。

 

示例 1：

输入：s = "3[a]2[bc]"
输出："aaabcbc"
示例 2：

输入：s = "3[a2[c]]"
输出："accaccacc"
示例 3：

输入：s = "2[abc]3[cd]ef"
输出："abcabccdcdcdef"
示例 4：

输入：s = "abc3[cd]xyz"
输出："abccdcdcdxyz"

# 我是暴力扫描做的这题，这题难点是大量的迭代器精确切片，边界条件很繁琐。


class Solution:
    def decodeString(self, s: str) -> str:
        left = -1
        right = -1

        while left != 0:
            left, right, pxstart = 0, 0, 0
            switch = 1

            for i,c in enumerate(s):
                if c in ["0","1","2","3","4","5","6","7","8","9"] and switch:
                    pxstart = i
                    switch = 0
                if c == "[":
                    left = i
                    switch = 1
                if c == "]":
                    right = i
                    break
            
            if left == 0:
                break

            if pxstart == 0:
                str_l = ""
            else:
                str_l = s[:pxstart]
            str_mpx = s[pxstart: left]
            str_m = s[left+1:right]
            str_r = s[right+1:]
            # print(s)
            # print(str_l,"#",str_m,"#",str_r,"?",str_mpx)
            # print("-" * 15)
            s = str_l + int(str_mpx) * str_m + str_r
            # return s

        return s