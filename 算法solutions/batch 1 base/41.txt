41. 缺失的第一个正数
给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。

请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。
 

示例 1：

输入：nums = [1,2,0]
输出：3
示例 2：

输入：nums = [3,4,-1,1]
输出：2
示例 3：

输入：nums = [7,8,9,11,12]
输出：1

# 基本思路：从1到n进行线性扫描，扫描到第一个没出现的数字就是要的数字。

class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:

        pol = max(nums)
        if pol < 1:
            return 1
        r = set(nums)
        for i in range(1,pol+2):
            if i not in r:
                return i

# 额外笔记 : 可以用扫描+置换的方法降低空间复杂度。将数组视为哈希表，序号向数码映射的这样一个哈希表。