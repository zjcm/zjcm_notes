给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个下标。

 

示例 1：

输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

# 这题，贪心思路，逐渐判断和更新能到达的最右位置。因为只能一直往右所以是正确的。类似的力扣杯LCP第九题，允许往左走，就麻烦的多了。

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        rightest, now = 0, 0
        t = len(nums)
        while 1:
            rightest = max(rightest, now + nums[now])
            if rightest >= t - 1: return True
            if rightest <= now: return False
            now += 1