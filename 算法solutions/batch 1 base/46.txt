46. 全排列
给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。

 

示例 1：

输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
示例 2：

输入：nums = [0,1]
输出：[[0,1],[1,0]]
示例 3：

输入：nums = [1]
输出：[[1]]

# 思路，我用的最朴实无华的"老米深搜"法，递归做，每次吐出来的是列表的列表。
# 官方的cycle法至今没怎么看懂。有时间debug了慢慢看。(?)

class Solution:
    
    # 老米深搜
    def permute(self, nums):
        def dfs(L):
            if len(L) == 1:
                return [[L[0]]]
            else:
                R = []
                for i in range(len(L)):
                    subj = L[i]
                    obj = L[:i] + L[i+1:]
                    V = dfs(obj)
                    for v in V:
                        R.append([subj] + v)
                return R
        return dfs(nums)


    # cycle 官方法 [没看懂]
    """
    def permute(self, nums):
        iterable = nums
        res = []
        pool = tuple(iterable)
        n = len(pool)

        indices = listi:(range(n))
        cycles = list(range(n, 0, -1))
        res.append([pool[i] for i in indices[:n]])
        while n:
            for i in reversed(range(n)):
                c = cycles
                cycles[i] -= 1
                if cycles[i] == 0:
                    indices[i:] = indices[i + 1:] + indices[i:i + 1]
                    cycles[i] = n - i
                else:
                    j = cycles[i]
                    indices[i], indices[-j] = indices[-j], indices[i]
                    res.append([pool[i] for i in indices[:n]])
                    break
            else:
                return res
    """


    # dfs 回溯
    """
    def permute(self, nums):
        def backtrack(first = 0):
            if first == n:  
                res.append(nums[:])
            for i in range(first, n):
                nums[first], nums[i] = nums[i], nums[first]
                backtrack(first + 1)
                nums[first], nums[i] = nums[i], nums[first]
        
        n = len(nums)
        res = []
        backtrack()
        return res
    """