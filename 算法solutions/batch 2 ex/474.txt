474. 一和零
给你一个二进制字符串数组 strs 和两个整数 m 和 n 。

请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。

如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。

 

示例 1：

输入：strs = ["10", "0001", "111001", "1", "0"], m = 5, n = 3
输出：4
解释：最多有 5 个 0 和 3 个 1 的最大子集是 {"10","0001","1","0"} ，因此答案是 4 。
其他满足题意但较小的子集包括 {"0001","1"} 和 {"10","1","0"} 。{"111001"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。
示例 2：

输入：strs = ["10", "0", "1"], m = 1, n = 1
输出：2
解释：最大的子集是 {"0", "1"} ，所以答案是 2 。

#### 0-1背包问题变体
#### 价格有两个维度
#### 特别注意dp[i][j][k] = max(dp[i-1][j-cost_1][k-cost_2] + 1, dp[i][j][k])我一开始写成了dp[i][j][k] = max(dp[i][j-cost_1][k-cost_2] + 1, dp[i][j][k])，找了好久的问题没找到

class Solution:
    
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        size = len(strs)
        dp = [[[0] * (n+1) for i in range(m+1)] for j in range(size+1)]
        # dp[x][y][z] 用前x个元素，用y个0，用z个1 可以获得的最大物品数
        for i in range(size+1):
            if i == 0: continue
            goods = strs[i-1]
            cost_1 = goods.count("0")
            cost_2 = goods.count("1")
            for j in range(m+1):
                for k in range(n+1):
                    # 要么不买 要么买 两种情况
                    dp[i][j][k] = dp[i-1][j][k]
                    if j >= cost_1 and k >= cost_2: # 不买
                        dp[i][j][k] = max(dp[i-1][j-cost_1][k-cost_2] + 1, dp[i][j][k])

        return dp[size][m][n]