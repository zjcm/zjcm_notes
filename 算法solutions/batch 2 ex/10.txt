10. 正则表达式匹配
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

 
示例 1：

输入：s = "aa" p = "a"
输出：false
解释："a" 无法匹配 "aa" 整个字符串。
示例 2:

输入：s = "aa" p = "a*"
输出：true
解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3：

输入：s = "ab" p = ".*"
输出：true
解释：".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4：

输入：s = "aab" p = "c*a*b"
输出：true
解释：因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5：

输入：s = "mississippi" p = "mis*is*p*."
输出：false
 

提示：

0 <= s.length <= 20
0 <= p.length <= 30
s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
保证每次出现字符 * 时，前面都匹配到有效的字符

#### 二维表DP 和44题一样 边界条件很麻烦 尤其注意

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        
        # 用p匹配s
        n = len(s)
        m = len(p)

        #
        vp = len(p) - 2 * p.count("*")
        if vp > n: return False
        #
        table = [[0]*(n+1) for x in range(m+1)] # m+1 行 n+1 列
        table[0][0] = 1

        for i in range(1,m+1):
            c = p[i-1]
            for j in range(n+1):
                c2 = s[j-1] if j >= 1 else "TOKEN"
                c3 = p[i-2] if i >= 2 else "TOKEN"
                if c != "*":
                    if c == "." or c == c2:
                        table[i][j] = table[i-1][j-1]
                else:
                    if c3 == "." or c2 == c3:
                        if j >= 1 and i >= 2:
                            table[i][j] = max(table[i-2][j],table[i][j-1])
                        elif i >= 2:
                            table[i][j] = table[i-2][j]
                        elif j >= 1:
                            table[i][j] = table[i][j-1]
                    else:
                        if i >= 2:
                            table[i][j] = table[i-2][j]
                        else:
                            table[i][j] = 0
        
        print(table)

        return bool(table[-1][-1])