 221. 最大正方形
在一个由 '0' 和 '1' 组成的二维矩阵内，找到只包含 '1' 的最大正方形，并返回其面积。

 

示例 1：


输入：matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
输出：4
示例 2：


输入：matrix = [["0","1"],["1","0"]]
输出：1
示例 3：

输入：matrix = [["0"]]
输出：0
 

提示：

m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] 为 '0' 或 '1'

#### 思路1：暴力搜索 + 剪枝 时间复杂度击败11%空间复杂度击败16%
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:

        max_len = 0
        n, m = len(matrix), len(matrix[0])
        ans = 0

        def check(i,j,vn,vm):
            ans = 0
            element = matrix[i][j]
            v = min(vn,vm)
            for k in range(v):
                for a in range(k):
                    element = matrix[i+a][j+k]
                    if element == '0':
                        return ans
                for b in range(k):
                    element = matrix[i+k][j+b]
                    if element == '0':
                        return ans
                if matrix[i+k][j+k] == '0':
                    return ans
                ans += 1
            return ans

        for i in range(n):
            vn = n - i
            for j in range(m):
                vm = m - j
                temp = 0
                if min(vn,vm) >= ans:
                    temp = check(i,j,vn,vm)
                    ans = max(ans, temp)
        
        return ans ** 2

#### 思路2：dp 。状态dp[i,j]表示第i,j个位置为正方形右下角时，最大的正方形面积
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        dp = matrix.copy()
        n, m = len(matrix), len(matrix[0])
        ans = 0

        for i in range(n):
            for j in range(m):
                element = matrix[i][j]
                if element == '0':
                    dp[i][j] = 0
                else:
                    if i >= 1 and j >= 1:
                        dp[i][j] = 1 + min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])
                    else:
                        dp[i][j] = 1
                    """
                    elif i >= 1:
                        dp[i][j] = 1 + min(dp[i-1][j],1)
                    elif j >= 1:
                        dp[i][j] = 1 + min(dp[i][j-1],1)
                    else:
                        dp[i][j] = 1
                    """
                ans = max(ans, dp[i][j])
        
        return ans ** 2