44. 通配符匹配
给定一个字符串 (s) 和一个字符模式 (p) ，实现一个支持 '?' 和 '*' 的通配符匹配。

'?' 可以匹配任何单个字符。
'*' 可以匹配任意字符串（包括空字符串）。
两个字符串完全匹配才算匹配成功。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 ? 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "*"
输出: true
解释: '*' 可以匹配任意字符串。
示例 3:

输入:
s = "cb"
p = "?a"
输出: false
解释: '?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。
示例 4:

输入:
s = "adceb"
p = "*a*b"
输出: true
解释: 第一个 '*' 可以匹配空字符串, 第二个 '*' 可以匹配字符串 "dce".
示例 5:

输入:
s = "acdcb"
p = "a*c?b"
输出: false

#### 这题思路不难。二维表dp即可。二维状态table[i][j]表示，字符串p的前i个字符能否匹配字符串s的前j个字符。
#### 难点在于各种边界条件，我调了一个小时才调好这些边界条件，中间print了很多东西，题解中未删除修补痕迹，
#### 一开始犯了一个严重错误，if c.isalpha()这里的括号没加，并不会报错但会使得逻辑错误，引以为鉴

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        #s = "abc"
        #p = "abc***"
        if set(p) == {"*"}: return True
        # 用 p 匹配 s， 判断是否匹配成功？
        ls,lp = len(s),len(p)
        table = [[0]*(ls+1) for x in range(lp+1)] # lp+1行ls+1列
        table[0][0] = 1 # 为了容纳开头就要判断的边界情况，上述table多设一行一列，从start token开始
        for i in range(lp):
            c = p[i]  #
            # print("pre c =",c)
            for j in range(ls+1):
                # table lp+1行ls+1列
                # table 中的0行0列想要迭代时，要判断的是 table中的1行1列的位置的值
                # 而这相当于是要分别判断字符串中第1个和第1个字符
                # 字符串p的第i个字符是 p[0],字符串s的第j个字符是 p[0]
                # 务必将所有的0和0对应起来
                c2 = s[j] if j < ls else "end_token"
                if table[i][j]:
                    # print("FIRST BRANCH",c,c2,str(c=="*"))
                    
                    if c.isalpha() or c == "?":
                        # print("M")
                        if i == lp or j == ls: # 最后一行或者最后一列了就直接break吧
                            break
                        else:
                            if c == c2 or c == "?":
                                table[i+1][j+1] = 1
                    
                    if c == "*":
                        # print("B")
                        if i == lp: # 最后一行了就直接break吧,但星号最后一列可以继续往下走
                            # print("A")
                            break
                        else:
                            k = j
                            while k <= ls:
                                table[i+1][k] = 1
                                k += 1
                            # print("N")

                    # print("loop end")

                if i == 0: # 如果是第一行，那么也只需要考虑第一列
                    # print("C")
                    break
        # print(table)
        return bool(table[-1][-1])